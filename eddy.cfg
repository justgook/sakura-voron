[mcu eddy]
serial: /dev/serial/by-id/usb-Klipper_rp2040_504450612097B01C-if00
restart_method: command

[temperature_sensor btt_eddy_mcu]
sensor_type: temperature_mcu 
sensor_mcu: eddy 
min_temp: 10 
max_temp: 100 

[probe_eddy_current btt_eddy]
sensor_type: ldc1612
i2c_mcu: eddy  
i2c_bus: i2c0f 
x_offset: 0
y_offset: 21.42
z_offset: 2.5

[temperature_probe btt_eddy]
sensor_type: Generic 3950
sensor_pin: eddy:gpio26
horizontal_move_z: 2

[bed_mesh]
horizontal_move_z: 2
speed: 200
mesh_min: 15, 21.42
mesh_max: 335, 335
probe_count: 9, 9
algorithm: bicubic
scan_overshoot: 8



[gcode_macro SET_GCODE_OFFSET]
rename_existing: SET_GCODE_OFFSET_ORIG
variable_restored: False  # Mark whether the var has been restored from NVM
variable_runtime_offset: 0
gcode:
  SET_GCODE_OFFSET_ORIG { rawparams }


# This macro automates a lot of the frequency mapping process and simplifies the steps significantly.
[gcode_macro PROBE_EDDY_CURRENT_CALIBRATE_AUTO]
gcode:
  BED_MESH_CLEAR
  G28 X Y
  G90 # Abs positioning
  G1 X{ printer.toolhead.axis_maximum.x/2 } Y{ printer.toolhead.axis_maximum.y/2 } F6000
  {% if 'z' not in printer.toolhead.homed_axes %}
    SET_KINEMATIC_POSITION Z={ printer.toolhead.axis_maximum.z-1 } # Allows the user to work it down until it touches.
  {% endif %}
  PROBE_EDDY_CURRENT_CALIBRATE {rawparams}



